/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "pir_client.h"
#include "pir_server.h"
#include "Faker.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(jint count,unsigned char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned char >(static_cast<std::vector< unsigned char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint8_t_Sg__doSize(std::vector< uint8_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(std::vector< uint8_t > *self,std::vector< unsigned char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doRemove(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_uint8_t_Sg__doGet(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doSet(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doRemoveRange(std::vector< uint8_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< uint8_t > > *new_std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg___SWIG_2(jint count,std::vector< uint8_t > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::vector< uint8_t > >(static_cast<std::vector< std::vector< uint8_t > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSize(std::vector< std::vector< uint8_t > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_0(std::vector< std::vector< uint8_t > > *self,std::vector< std::vector< unsigned char > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_1(std::vector< std::vector< uint8_t > > *self,jint index,std::vector< std::vector< unsigned char > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemove(std::vector< std::vector< uint8_t > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::vector< uint8_t > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type const &std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doGet(std::vector< std::vector< uint8_t > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSet(std::vector< std::vector< uint8_t > > *self,jint index,std::vector< std::vector< unsigned char > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::vector< uint8_t > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemoveRange(std::vector< std::vector< uint8_t > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

static int *new_intp(void) { 
  return new int(); 
}

static int *copy_intp(int value) { 
  return new int(value); 
}

static void delete_intp(int *obj) { 
  delete obj; 
}

static void intp_assign(int *obj, int value) {
  *obj = value;
}

static int intp_value(int *obj) {
  return *obj;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1Faker(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Faker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Faker *)new Faker();
  *(Faker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateCNIDCardNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateCNIDCardNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateCNIDCardNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateCNIDCardNumber();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateTWCompatriotNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateTWCompatriotNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateTWCompatriotNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateTWCompatriotNumber();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateTWIDCardNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateTWIDCardNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateTWIDCardNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateTWIDCardNumber();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateTW2CNIDCardNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateTW2CNIDCardNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateTW2CNIDCardNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateTW2CNIDCardNumber();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GeneratePhoneNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GeneratePhoneNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GeneratePhoneNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GeneratePhoneNumber();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateMACAddress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateMACAddress(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateMACAddress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateMACAddress();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateIMEI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateIMEI(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateIMEI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateIMEI();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateIMSI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateIMSI(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateIMSI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateIMSI();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateEmail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GenerateEmail(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GenerateEmail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GenerateEmail();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GeneratePassportNumber_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GeneratePassportNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_Faker_1GeneratePassportNumber_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Faker **)&jarg1; 
  result = (arg1)->GeneratePassportNumber();
  *(std::vector< std::vector< uint8_t > > **)&jresult = new std::vector< std::vector< uint8_t > >(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_delete_1Faker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Faker *arg1 = (Faker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Faker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1PirClient(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::vector< uint8_t > *arg2 = 0 ;
  bool arg3 ;
  int *arg4 = 0 ;
  PirClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & is null");
    return 0;
  } 
  result = (PirClient *)new PirClient(arg1,(std::vector< uint8_t > const &)*arg2,arg3,*arg4);
  *(PirClient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_delete_1PirClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PirClient *arg1 = (PirClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PirClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirClient_1generate_1data_1query(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  int arg3 ;
  std::vector< std::vector< uint8_t > > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(PirClient **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = *(std::vector< std::vector< uint8_t > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > & is null");
    return 0;
  } 
  result = (int)(arg1)->generate_data_query((std::vector< std::vector< uint8_t > > const &)*arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirClient_1decrypt_1data_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(PirClient **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > & is null");
    return 0;
  } 
  result = (int)(arg1)->decrypt_data_reply((std::vector< std::vector< uint8_t > > const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirClient_1generate_1data_1query_1with_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  int arg3 ;
  std::vector< std::vector< uint8_t > > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(PirClient **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = *(std::vector< std::vector< uint8_t > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > & is null");
    return 0;
  } 
  result = (int)(arg1)->generate_data_query_with_count((std::vector< std::vector< uint8_t > > const &)*arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirClient_1get_1retrieved_1indexes_1and_1ciphertext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jint jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *arg3 = 0 ;
  int arg4 ;
  std::vector< uint8_t > arg5 ;
  std::vector< std::vector< uint8_t > > arg6 ;
  std::vector< uint8_t > *argp5 ;
  std::vector< std::vector< uint8_t > > *argp6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(PirClient **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = *(std::vector< std::vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  argp5 = *(std::vector< uint8_t > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint8_t >");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(std::vector< std::vector< uint8_t > > **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< uint8_t > >");
    return 0;
  }
  arg6 = *argp6; 
  result = (int)(arg1)->get_retrieved_indexes_and_ciphertext((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< std::vector< uint8_t > > const &)*arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirClient_1generate_1key_1query_1of_1retrieved_1indexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(PirClient **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > & is null");
    return 0;
  } 
  result = (int)(arg1)->generate_key_query_of_retrieved_indexes((std::vector< std::vector< uint8_t > > const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirClient_1decrypt_1retrieved_1ciphertext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  std::vector< uint8_t > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(PirClient **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  arg4 = *(std::vector< uint8_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > & is null");
    return 0;
  } 
  result = (int)(arg1)->decrypt_retrieved_ciphertext((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< uint8_t > const &)*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirClient_1set_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PirClient **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  result = (int)(arg1)->set_key((std::vector< uint8_t > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_PirClient_1get_1private_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PirClient **)&jarg1; 
  result = (arg1)->get_private_key();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_PirClient_1get_1public_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PirClient **)&jarg1; 
  result = (arg1)->get_public_key();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1PirServer(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::vector< uint8_t > arg2 ;
  bool arg3 ;
  int *arg4 = 0 ;
  std::vector< uint8_t > const *argp2 ;
  PirServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  argp2 = *(std::vector< uint8_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint8_t > const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & is null");
    return 0;
  } 
  result = (PirServer *)new PirServer(arg1,arg2,arg3,*arg4);
  *(PirServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_delete_1PirServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PirServer *arg1 = (PirServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PirServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirServer_1generate_1data_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *arg3 = 0 ;
  std::vector< std::vector< uint8_t > > *arg4 = 0 ;
  std::vector< std::vector< uint8_t > > *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(PirServer **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = *(std::vector< std::vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg4 = *(std::vector< std::vector< uint8_t > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg5 = *(std::vector< std::vector< uint8_t > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > & is null");
    return 0;
  } 
  result = (int)(arg1)->generate_data_reply((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< std::vector< uint8_t > > const &)*arg3,(std::vector< std::vector< uint8_t > > const &)*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirServer_1generate_1checked_1data_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *arg3 = 0 ;
  std::vector< uint8_t > *arg4 = 0 ;
  std::vector< std::vector< uint8_t > > *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(PirServer **)&jarg1; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg3 = *(std::vector< std::vector< uint8_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  arg4 = *(std::vector< uint8_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  arg5 = *(std::vector< std::vector< uint8_t > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > & is null");
    return 0;
  } 
  result = (int)(arg1)->generate_checked_data_reply((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< std::vector< uint8_t > > const &)*arg3,(std::vector< uint8_t > const &)*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirServer_1generate_1checked_1key_1reply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  int *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(PirServer **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > & is null");
    return 0;
  } 
  arg4 = *(int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & is null");
    return 0;
  } 
  result = (int)(arg1)->generate_checked_key_reply((std::vector< uint8_t > const &)*arg2,*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_PirServer_1set_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PirServer **)&jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  result = (int)(arg1)->set_key((std::vector< uint8_t > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_PirServer_1get_1private_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PirServer **)&jarg1; 
  result = (arg1)->get_private_key();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_PirServer_1get_1public_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PirServer **)&jarg1; 
  result = (arg1)->get_public_key();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1VectorUInt8_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1VectorUInt8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_VectorUInt8_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_VectorUInt8_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_pir_pirJNI_VectorUInt8_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_VectorUInt8_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1VectorUInt8_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(unsigned char const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_VectorUInt8_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  try {
    result = std_vector_Sl_uint8_t_Sg__doSize((std::vector< unsigned char > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_VectorUInt8_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(arg1,(unsigned char const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_VectorUInt8_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jshort JNICALL Java_com_pir_pirJNI_VectorUInt8_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_pir_pirJNI_VectorUInt8_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_pir_pirJNI_VectorUInt8_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_VectorUInt8_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_delete_1VectorUInt8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1ArrayofVectorUInt8_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< uint8_t > > *)new std::vector< std::vector< uint8_t > >();
  *(std::vector< std::vector< uint8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1ArrayofVectorUInt8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< uint8_t > > const & is null");
    return 0;
  } 
  result = (std::vector< std::vector< uint8_t > > *)new std::vector< std::vector< uint8_t > >((std::vector< std::vector< uint8_t > > const &)*arg1);
  *(std::vector< std::vector< uint8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  result = ((std::vector< std::vector< uint8_t > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = (std::vector< std::vector< unsigned char > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< uint8_t > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1ArrayofVectorUInt8_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::vector< uint8_t > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::vector< uint8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & is null");
    return 0;
  } 
  try {
    result = (std::vector< std::vector< uint8_t > > *)new_std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::vector< unsigned char > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< uint8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSize((std::vector< std::vector< unsigned char > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_0(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = new std::vector< std::vector< unsigned char > >::value_type(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::vector< unsigned char > >::value_type *) &std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  std::vector< std::vector< unsigned char > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = new std::vector< std::vector< unsigned char > >::value_type(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_ArrayofVectorUInt8_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_delete_1ArrayofVectorUInt8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< uint8_t > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_new_1intp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)new_intp();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_pir_pirJNI_copy_1intp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)copy_intp(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_delete_1intp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intp(arg1);
}


SWIGEXPORT void JNICALL Java_com_pir_pirJNI_intp_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  intp_assign(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_com_pir_pirJNI_intp_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)intp_value(arg1);
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

