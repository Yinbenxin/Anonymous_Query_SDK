/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: /Users/admin/git/Pir-SDK/cpp/swig-go/pir.i



#define SWIG_VERSION 0x040101
#define SWIGGO
#define SWIGMODULE pir
#define SWIGGO_PREFIX go.pir
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#define SWIGGO_GCCGO

#ifdef __cplusplus
extern "C" {
#endif
extern void *_cgo_allocate(size_t);
extern void _cgo_panic(const char *);
#ifdef __cplusplus
}
#endif

#define _swig_goallocate _cgo_allocate
#define _swig_gopanic _cgo_panic


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "pir_client.h"
#include "pir_server.h"
#include "Faker.h"


#include <string>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_uint8_t_Sg__get(std::vector< uint8_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__set(std::vector< uint8_t > *self,int i,std::vector< unsigned char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< unsigned char > >::const_reference std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__get(std::vector< std::vector< uint8_t > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__set(std::vector< std::vector< uint8_t > > *self,int i,std::vector< std::vector< unsigned char > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_pir_c6eb00fb9a209540(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_pir_c6eb00fb9a209540(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


Faker *_wrap_new_Faker_pir_c6eb00fb9a209540() {
  Faker *result = 0 ;
  Faker *_swig_go_result;
  
  
  result = (Faker *)new Faker();
  *(Faker **)&_swig_go_result = (Faker *)result; 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateCNIDCardNumber__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateCNIDCardNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateCNIDCardNumber__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateCNIDCardNumber();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateTWCompatriotNumber__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateTWCompatriotNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateTWCompatriotNumber__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateTWCompatriotNumber();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateTWIDCardNumber__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateTWIDCardNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateTWIDCardNumber__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateTWIDCardNumber();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateTW2CNIDCardNumber__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateTW2CNIDCardNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateTW2CNIDCardNumber__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateTW2CNIDCardNumber();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GeneratePhoneNumber__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GeneratePhoneNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GeneratePhoneNumber__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GeneratePhoneNumber();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateMACAddress__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateMACAddress(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateMACAddress__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateMACAddress();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateIMEI__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateIMEI(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateIMEI__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateIMEI();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateIMSI__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateIMSI(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateIMSI__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateIMSI();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateEmail__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GenerateEmail(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GenerateEmail__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GenerateEmail();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GeneratePassportNumber__SWIG_0_pir_c6eb00fb9a209540(Faker *_swig_go_0, intgo _swig_go_1) {
  Faker *arg1 = (Faker *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (arg1)->GeneratePassportNumber(arg2);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_Faker_GeneratePassportNumber__SWIG_1_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  std::vector< std::vector< uint8_t > > result;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  result = (arg1)->GeneratePassportNumber();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = new std::vector< std::vector< uint8_t > >(result); 
  return _swig_go_result;
}


void _wrap_delete_Faker_pir_c6eb00fb9a209540(Faker *_swig_go_0) {
  Faker *arg1 = (Faker *) 0 ;
  
  arg1 = *(Faker **)&_swig_go_0; 
  
  delete arg1;
  
}


PirClient *_wrap_new_PirClient_pir_c6eb00fb9a209540(intgo _swig_go_0, std::vector< unsigned char > *_swig_go_1, bool _swig_go_2, intgo *_swig_go_3) {
  int arg1 ;
  std::vector< uint8_t > *arg2 = 0 ;
  bool arg3 ;
  int *arg4 = 0 ;
  int e4 ;
  PirClient *result = 0 ;
  PirClient *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  e4 = (int)*_swig_go_3;
  arg4 = &e4;
  
  
  result = (PirClient *)new PirClient(arg1,(std::vector< uint8_t > const &)*arg2,arg3,*arg4);
  *(PirClient **)&_swig_go_result = (PirClient *)result; 
  *_swig_go_3 = (intgo)e4; 
  return _swig_go_result;
}


void _wrap_delete_PirClient_pir_c6eb00fb9a209540(PirClient *_swig_go_0) {
  PirClient *arg1 = (PirClient *) 0 ;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_PirClient_generate_data_query_pir_c6eb00fb9a209540(PirClient *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, intgo _swig_go_2, std::vector< std::vector< unsigned char > > *_swig_go_3) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  int arg3 ;
  std::vector< std::vector< uint8_t > > *arg4 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_3; 
  
  result = (int)(arg1)->generate_data_query((std::vector< std::vector< uint8_t > > const &)*arg2,arg3,*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirClient_decrypt_data_reply_pir_c6eb00fb9a209540(PirClient *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, std::vector< unsigned char > *_swig_go_2) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = *(std::vector< uint8_t > **)&_swig_go_2; 
  
  result = (int)(arg1)->decrypt_data_reply((std::vector< std::vector< uint8_t > > const &)*arg2,*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirClient_generate_data_query_with_count_pir_c6eb00fb9a209540(PirClient *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, intgo _swig_go_2, std::vector< std::vector< unsigned char > > *_swig_go_3) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  int arg3 ;
  std::vector< std::vector< uint8_t > > *arg4 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_3; 
  
  result = (int)(arg1)->generate_data_query_with_count((std::vector< std::vector< uint8_t > > const &)*arg2,arg3,*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirClient_get_retrieved_indexes_and_ciphertext_pir_c6eb00fb9a209540(PirClient *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, std::vector< std::vector< unsigned char > > *_swig_go_2, intgo _swig_go_3, std::vector< unsigned char > *_swig_go_4, std::vector< std::vector< unsigned char > > *_swig_go_5) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *arg3 = 0 ;
  int arg4 ;
  std::vector< uint8_t > arg5 ;
  std::vector< std::vector< uint8_t > > arg6 ;
  std::vector< uint8_t > *argp5 ;
  std::vector< std::vector< uint8_t > > *argp6 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  argp5 = (std::vector< uint8_t > *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< uint8_t >");
  }
  arg5 = (std::vector< uint8_t >)*argp5;
  
  
  argp6 = (std::vector< std::vector< uint8_t > > *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< std::vector< uint8_t > >");
  }
  arg6 = (std::vector< std::vector< uint8_t > >)*argp6;
  
  
  result = (int)(arg1)->get_retrieved_indexes_and_ciphertext((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< std::vector< uint8_t > > const &)*arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirClient_generate_key_query_of_retrieved_indexes_pir_c6eb00fb9a209540(PirClient *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, std::vector< unsigned char > *_swig_go_2) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = *(std::vector< uint8_t > **)&_swig_go_2; 
  
  result = (int)(arg1)->generate_key_query_of_retrieved_indexes((std::vector< std::vector< uint8_t > > const &)*arg2,*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirClient_decrypt_retrieved_ciphertext_pir_c6eb00fb9a209540(PirClient *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, std::vector< unsigned char > *_swig_go_2, std::vector< unsigned char > *_swig_go_3) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  std::vector< uint8_t > *arg4 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = *(std::vector< uint8_t > **)&_swig_go_2; 
  arg4 = *(std::vector< uint8_t > **)&_swig_go_3; 
  
  result = (int)(arg1)->decrypt_retrieved_ciphertext((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< uint8_t > const &)*arg3,*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirClient_set_key_pir_c6eb00fb9a209540(PirClient *_swig_go_0, std::vector< unsigned char > *_swig_go_1) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  result = (int)(arg1)->set_key((std::vector< uint8_t > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< unsigned char > *_wrap_PirClient_get_private_key_pir_c6eb00fb9a209540(PirClient *_swig_go_0) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< uint8_t > result;
  std::vector< unsigned char > *_swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  
  result = (arg1)->get_private_key();
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


std::vector< unsigned char > *_wrap_PirClient_get_public_key_pir_c6eb00fb9a209540(PirClient *_swig_go_0) {
  PirClient *arg1 = (PirClient *) 0 ;
  std::vector< uint8_t > result;
  std::vector< unsigned char > *_swig_go_result;
  
  arg1 = *(PirClient **)&_swig_go_0; 
  
  result = (arg1)->get_public_key();
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


PirServer *_wrap_new_PirServer_pir_c6eb00fb9a209540(intgo _swig_go_0, std::vector< unsigned char > *_swig_go_1, bool _swig_go_2, intgo *_swig_go_3) {
  int arg1 ;
  std::vector< uint8_t > arg2 ;
  bool arg3 ;
  int *arg4 = 0 ;
  std::vector< uint8_t > const *argp2 ;
  int e4 ;
  PirServer *result = 0 ;
  PirServer *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  argp2 = (std::vector< uint8_t > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< uint8_t > const");
  }
  arg2 = (std::vector< uint8_t >)*argp2;
  
  arg3 = (bool)_swig_go_2; 
  
  e4 = (int)*_swig_go_3;
  arg4 = &e4;
  
  
  result = (PirServer *)new PirServer(arg1,arg2,arg3,*arg4);
  *(PirServer **)&_swig_go_result = (PirServer *)result; 
  *_swig_go_3 = (intgo)e4; 
  return _swig_go_result;
}


void _wrap_delete_PirServer_pir_c6eb00fb9a209540(PirServer *_swig_go_0) {
  PirServer *arg1 = (PirServer *) 0 ;
  
  arg1 = *(PirServer **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_PirServer_generate_data_reply_pir_c6eb00fb9a209540(PirServer *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, std::vector< std::vector< unsigned char > > *_swig_go_2, std::vector< std::vector< unsigned char > > *_swig_go_3, std::vector< std::vector< unsigned char > > *_swig_go_4) {
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *arg3 = 0 ;
  std::vector< std::vector< uint8_t > > *arg4 = 0 ;
  std::vector< std::vector< uint8_t > > *arg5 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirServer **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_2; 
  arg4 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_3; 
  arg5 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_4; 
  
  result = (int)(arg1)->generate_data_reply((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< std::vector< uint8_t > > const &)*arg3,(std::vector< std::vector< uint8_t > > const &)*arg4,*arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirServer_generate_checked_data_reply_pir_c6eb00fb9a209540(PirServer *_swig_go_0, std::vector< std::vector< unsigned char > > *_swig_go_1, std::vector< std::vector< unsigned char > > *_swig_go_2, std::vector< unsigned char > *_swig_go_3, std::vector< std::vector< unsigned char > > *_swig_go_4) {
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< std::vector< uint8_t > > *arg2 = 0 ;
  std::vector< std::vector< uint8_t > > *arg3 = 0 ;
  std::vector< uint8_t > *arg4 = 0 ;
  std::vector< std::vector< uint8_t > > *arg5 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirServer **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_1; 
  arg3 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_2; 
  arg4 = *(std::vector< uint8_t > **)&_swig_go_3; 
  arg5 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_4; 
  
  result = (int)(arg1)->generate_checked_data_reply((std::vector< std::vector< uint8_t > > const &)*arg2,(std::vector< std::vector< uint8_t > > const &)*arg3,(std::vector< uint8_t > const &)*arg4,*arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PirServer_generate_checked_key_reply_pir_c6eb00fb9a209540(PirServer *_swig_go_0, std::vector< unsigned char > *_swig_go_1, std::vector< unsigned char > *_swig_go_2, intgo *_swig_go_3) {
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  int *arg4 = 0 ;
  int e4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirServer **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  arg3 = *(std::vector< uint8_t > **)&_swig_go_2; 
  
  e4 = (int)*_swig_go_3;
  arg4 = &e4;
  
  
  result = (int)(arg1)->generate_checked_key_reply((std::vector< uint8_t > const &)*arg2,*arg3,*arg4);
  _swig_go_result = result; 
  *_swig_go_3 = (intgo)e4; 
  return _swig_go_result;
}


intgo _wrap_PirServer_set_key_pir_c6eb00fb9a209540(PirServer *_swig_go_0, std::vector< unsigned char > *_swig_go_1) {
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PirServer **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  result = (int)(arg1)->set_key((std::vector< uint8_t > const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< unsigned char > *_wrap_PirServer_get_private_key_pir_c6eb00fb9a209540(PirServer *_swig_go_0) {
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > result;
  std::vector< unsigned char > *_swig_go_result;
  
  arg1 = *(PirServer **)&_swig_go_0; 
  
  result = (arg1)->get_private_key();
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


std::vector< unsigned char > *_wrap_PirServer_get_public_key_pir_c6eb00fb9a209540(PirServer *_swig_go_0) {
  PirServer *arg1 = (PirServer *) 0 ;
  std::vector< uint8_t > result;
  std::vector< unsigned char > *_swig_go_result;
  
  arg1 = *(PirServer **)&_swig_go_0; 
  
  result = (arg1)->get_public_key();
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


std::vector< unsigned char > *_wrap_new_VectorUInt8__SWIG_0_pir_c6eb00fb9a209540() {
  std::vector< uint8_t > *result = 0 ;
  std::vector< unsigned char > *_swig_go_result;
  
  
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&_swig_go_result = (std::vector< uint8_t > *)result; 
  return _swig_go_result;
}


std::vector< unsigned char > *_wrap_new_VectorUInt8__SWIG_1_pir_c6eb00fb9a209540(long long _swig_go_0) {
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< uint8_t > *result = 0 ;
  std::vector< unsigned char > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >(arg1);
  *(std::vector< uint8_t > **)&_swig_go_result = (std::vector< uint8_t > *)result; 
  return _swig_go_result;
}


std::vector< unsigned char > *_wrap_new_VectorUInt8__SWIG_2_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  std::vector< unsigned char > *_swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  *(std::vector< uint8_t > **)&_swig_go_result = (std::vector< uint8_t > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorUInt8_size_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = ((std::vector< uint8_t > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorUInt8_capacity_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorUInt8_reserve_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0, long long _swig_go_1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorUInt8_isEmpty_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorUInt8_clear_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorUInt8_add_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0, char _swig_go_1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = (std::vector< unsigned char >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
  
}


char _wrap_VectorUInt8_get_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0, intgo _swig_go_1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  char _swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (unsigned char)*result; 
  return _swig_go_result;
}


void _wrap_VectorUInt8_set_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0, intgo _swig_go_1, char _swig_go_2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< unsigned char >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_uint8_t_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_VectorUInt8_pir_c6eb00fb9a209540(std::vector< unsigned char > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< unsigned char > > *_wrap_new_ArrayofVectorUInt8__SWIG_0_pir_c6eb00fb9a209540() {
  std::vector< std::vector< uint8_t > > *result = 0 ;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< uint8_t > > *)new std::vector< std::vector< uint8_t > >();
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = (std::vector< std::vector< uint8_t > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_new_ArrayofVectorUInt8__SWIG_1_pir_c6eb00fb9a209540(long long _swig_go_0) {
  std::vector< std::vector< unsigned char > >::size_type arg1 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< uint8_t > > *)new std::vector< std::vector< uint8_t > >(arg1);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = (std::vector< std::vector< uint8_t > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< unsigned char > > *_wrap_new_ArrayofVectorUInt8__SWIG_2_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0) {
  std::vector< std::vector< uint8_t > > *arg1 = 0 ;
  std::vector< std::vector< uint8_t > > *result = 0 ;
  std::vector< std::vector< unsigned char > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< uint8_t > > *)new std::vector< std::vector< uint8_t > >((std::vector< std::vector< uint8_t > > const &)*arg1);
  *(std::vector< std::vector< uint8_t > > **)&_swig_go_result = (std::vector< std::vector< uint8_t > > *)result; 
  return _swig_go_result;
}


long long _wrap_ArrayofVectorUInt8_size_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< uint8_t > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ArrayofVectorUInt8_capacity_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< uint8_t > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ArrayofVectorUInt8_reserve_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_ArrayofVectorUInt8_isEmpty_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< uint8_t > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ArrayofVectorUInt8_clear_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_ArrayofVectorUInt8_add_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0, std::vector< unsigned char > *_swig_go_1) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  std::vector< std::vector< unsigned char > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< unsigned char > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< unsigned char > >::value_type const &)*arg2);
  
}


std::vector< unsigned char > *_wrap_ArrayofVectorUInt8_get_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< uint8_t > >::value_type *result = 0 ;
  std::vector< unsigned char > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< uint8_t > >::value_type *) &std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< uint8_t > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ArrayofVectorUInt8_set_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0, intgo _swig_go_1, std::vector< unsigned char > *_swig_go_2) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< unsigned char > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_uint8_t_Sg__Sg__set(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_ArrayofVectorUInt8_pir_c6eb00fb9a209540(std::vector< std::vector< unsigned char > > *_swig_go_0) {
  std::vector< std::vector< uint8_t > > *arg1 = (std::vector< std::vector< uint8_t > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< uint8_t > > **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

