/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.pir;

public class PirClient {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected PirClient(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PirClient obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(PirClient obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        pirJNI.delete_PirClient(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public PirClient(int anonymity_number, VectorUInt8 key, boolean is_checked_count, SWIGTYPE_p_int error_code) {
    this(pirJNI.new_PirClient(anonymity_number, VectorUInt8.getCPtr(key), key, is_checked_count, SWIGTYPE_p_int.getCPtr(error_code)), true);
  }

  public int generate_data_query(ArrayofVectorUInt8 indexes, int index, ArrayofVectorUInt8 data_query) {
    return pirJNI.PirClient_generate_data_query(swigCPtr, this, ArrayofVectorUInt8.getCPtr(indexes), indexes, index, ArrayofVectorUInt8.getCPtr(data_query), data_query);
  }

  public int decrypt_data_reply(ArrayofVectorUInt8 data_reply, VectorUInt8 result) {
    return pirJNI.PirClient_decrypt_data_reply(swigCPtr, this, ArrayofVectorUInt8.getCPtr(data_reply), data_reply, VectorUInt8.getCPtr(result), result);
  }

  public int generate_data_query_with_count(ArrayofVectorUInt8 indexes, int position, ArrayofVectorUInt8 data_query) {
    return pirJNI.PirClient_generate_data_query_with_count(swigCPtr, this, ArrayofVectorUInt8.getCPtr(indexes), indexes, position, ArrayofVectorUInt8.getCPtr(data_query), data_query);
  }

  public int get_retrieved_indexes_and_ciphertext(ArrayofVectorUInt8 data_reply, ArrayofVectorUInt8 indexes, int position, VectorUInt8 retrieved_indexes, ArrayofVectorUInt8 retrieved_ciphertext) {
    return pirJNI.PirClient_get_retrieved_indexes_and_ciphertext(swigCPtr, this, ArrayofVectorUInt8.getCPtr(data_reply), data_reply, ArrayofVectorUInt8.getCPtr(indexes), indexes, position, VectorUInt8.getCPtr(retrieved_indexes), retrieved_indexes, ArrayofVectorUInt8.getCPtr(retrieved_ciphertext), retrieved_ciphertext);
  }

  public int generate_key_query_of_retrieved_indexes(ArrayofVectorUInt8 retrieved_indexes, VectorUInt8 retrieved_key_query) {
    return pirJNI.PirClient_generate_key_query_of_retrieved_indexes(swigCPtr, this, ArrayofVectorUInt8.getCPtr(retrieved_indexes), retrieved_indexes, VectorUInt8.getCPtr(retrieved_key_query), retrieved_key_query);
  }

  public int decrypt_retrieved_ciphertext(ArrayofVectorUInt8 retrieved_ciphertext, VectorUInt8 retrieved_key_reply, VectorUInt8 result) {
    return pirJNI.PirClient_decrypt_retrieved_ciphertext(swigCPtr, this, ArrayofVectorUInt8.getCPtr(retrieved_ciphertext), retrieved_ciphertext, VectorUInt8.getCPtr(retrieved_key_reply), retrieved_key_reply, VectorUInt8.getCPtr(result), result);
  }

  public int set_key(VectorUInt8 private_key) {
    return pirJNI.PirClient_set_key(swigCPtr, this, VectorUInt8.getCPtr(private_key), private_key);
  }

  public VectorUInt8 get_private_key() {
    return new VectorUInt8(pirJNI.PirClient_get_private_key(swigCPtr, this), true);
  }

  public VectorUInt8 get_public_key() {
    return new VectorUInt8(pirJNI.PirClient_get_public_key(swigCPtr, this), true);
  }

}
